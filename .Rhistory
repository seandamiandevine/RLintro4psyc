LIK = matrix(NA, 100, 100)
for(i in seq(MU)) {
for(j in seq(SIG)) {
LIK[i,j] = sum(dnorm(X, MU[i], SIG[j], log=T))
}
}
LIK
heatmap(LIK)
which.min(LIK)
which.max(LIK)
which( LIK==max(LIK) , arr.ind = T
which( LIK==max(LIK) , arr.ind = T
which( LIK==max(LIK) , arr.ind = T )
MU[76, 11]
MU[76]; SIG[11]
library(plotly)
install.packages("plotly")
library(plotly)
volcano
p <- plot_ly(z = volcano, type = "surface")
p
p <- plot_ly(z = LIK, type = "surface")
p
dim(volcano)
dim(LIK)
library(plotly)
p <- plot_ly(z = LIK, type = "surface")
rm(list=ls())
X    = rnorm(1000, 5, 2)
MU   = seq(-10, 10, l=100)
SIG  = seq(1,10, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
View(conds)
rm(list=ls())
X    = rnorm(1000, 5, 2)
MU   = seq(-10, 10, l=100)
SIG  = seq(1,10, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
View(conds)
p <- plot_ly(data=conds, type = "surface")
p
dev.off()
p <- plot_ly(data=conds, z=~LIK type = "surface")
p <- plot_ly(data=conds, z=~LIK, type = "surface")
p
p <- plot_ly(data=conds, x=~MU, y=~SIG, z=~LIK, type = "surface")
p
?MASS::kde2d
plot_ly(z = ~matrix(conds$LIK, nrow = length(unique(conds$MU)), byrow = TRUE),
type = "surface")
plot_ly(z = ~matrix(conds$LIK, nrow = length(unique(conds$MU)), byrow = TRUE),
type = "surface")%>%
layout(scene = list(
xaxis = list(title = "X"),
yaxis = list(title = "Y"),
zaxis = list(title = "Z")
))
x = matrix(conds$LIK, nrow = length(unique(conds$MU)), byrow = TRUE)
plot_ly(z = ~x,
type = "surface")%>%
layout(scene = list(
xaxis = list(title = "X"),
yaxis = list(title = "Y"),
zaxis = list(title = "Z")
))
kde2d(df$x, df$y)
MASS:kde2d(conds$MU, conds$SIG)
MASS::kde2d(conds$MU, conds$SIG)
kde_values = MASS::kde2d(conds$MU, conds$SIG)
plot_ly(z = ~kde_values$z,
type = "surface",
x = kde_values$x,
y = kde_values$y)
x = matrix(conds$LIK, nrow = length(unique(conds$MU)), byrow = TRUE)
plot_ly(z = ~,
x = matrix(conds$LIK, nrow = length(unique(conds$MU)), byrow = TRUE)
plot_ly(z = ~,
plot_ly(z = ~x,
type = "surface")%>%
layout(scene = list(
xaxis = list(title = "X"),
yaxis = list(title = "Y"),
zaxis = list(title = "Z")
))
rm(list=ls())
X    = rnorm(1000, 5, 2)
MU   = seq(-10, 10, l=100)
SIG  = seq(1,100, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
library(plotly)
kd = with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))
x = matrix(conds$LIK, nrow = length(unique(conds$MU)), byrow = TRUE)
plot_ly(z = ~x,
type = "surface")%>%
layout(scene = list(
xaxis = list(title = "X"),
yaxis = list(title = "Y"),
zaxis = list(title = "Z")
))
conds$SIG[i]
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
avg_lik
heatmap(avg_lik)
plot(avg_lik[1,])
apply(avg_lik, 2, mean)
plot(apply(avg_lik, 2, mean))
conds$SIG[i]
rm(list=ls())
X    = rnorm(1000, 5, 2)
MU   = seq(-10, 10, l=100)
SIG  = seq(1,10, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot(apply(avg_lik, 2, mean))
SIG  = seq(1,1000, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot(apply(avg_lik, 2, mean))
plot(apply(avg_lik, 1, mean))
rm(list=ls())
X    = rnorm(1000, 5, 2)
MU   = seq(-10, 20, l=100)
SIG  = seq(1,100, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot(apply(avg_lik, 1, mean))
rm(list=ls())
X    = rnorm(1000, 5, 2)
MU   = seq(-20, 20, l=100)
SIG  = seq(1,100, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot(apply(avg_lik, 1, mean))
SIG  = seq(1,10, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot_ly(z = ~avg_lik)
plot_ly(z = ~avg_lik) %>% add_surface()
rm(list=ls())
X    = rnorm(1000, 5, 2)
MU   = seq(-10, 20, l=100)
SIG  = seq(1,10, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot_ly(z = ~avg_lik) %>% add_surface()
rm(list=ls())
X    = rnorm(100, 5, 2)
MU   = seq(-10, 20, l=100)
SIG  = seq(1,10, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot_ly(z = ~avg_lik) %>% add_surface()
rm(list=ls())
X    = rnorm(100, 5, 2)
MU   = seq(-10, 20, l=100)
SIG  = seq(.1,10, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot_ly(z = ~avg_lik) %>% add_surface()
rm(list=ls())
X    = rnorm(100, 5, 10)
MU   = seq(-10, 20, l=100)
SIG  = seq(.1,1, l=100)
conds = expand.grid(MU=MU, SIG=SIG)
conds$LIK = NA
for(i in 1:nrow(conds)) {
conds$LIK[i] = sum(dnorm(X, conds$MU[i], conds$SIG[i], log=T))
}
avg_lik = tapply(conds$LIK, list(conds$MU, conds$SIG), mean)
plot_ly(z = ~avg_lik) %>% add_surface()
plot_ly(z = ~avg_lik) %>% add_surface(  contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
))
plot_ly(z = ~avg_lik) %>% add_surface(  contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)
heatmap(avg_lik)
avg_lik = avg_lik/max(avg_lik)
heatmap(avg_lik)
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
log_likelihood <- function(mu_x, mu_y, Sigma) {
X <- c(mu_x, mu_y)
loglik <- sum(dmvnorm(X, mean = c(0, 0), sigma = Sigma, log = TRUE))
return(loglik)
}
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
mu_x_vals <- seq(-3, 3, length.out = 30)
mu_y_vals <- seq(-3, 3, length.out = 30)
# Calculate log likelihood for each combination of means
loglik_matrix <- outer(mu_x_vals, mu_y_vals,
FUN = function(mu_x, mu_y) log_likelihood(mu_x, mu_y, Sigma))
# Create 3D contour plot
plot_ly(x = mu_x_vals, y = mu_y_vals, z = loglik_matrix, type = "contour3d",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
mu_x_vals
mu_y_vals
Sigma
# Function to calculate log likelihood
log_likelihood <- function(mu_x, mu_y, Sigma) {
X <- c(mu_x, mu_y)
loglik <- sum(dmvnorm(X, mean = c(0, 0), sigma = Sigma, log = TRUE))
return(loglik)
}
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
mu_x_vals <- seq(-3, 3, length.out = 30)
mu_y_vals <- seq(-3, 3, length.out = 30)
outer(mu_x_vals, mu_y_vals,
FUN = function(mu_x, mu_y) log_likelihood(mu_x, mu_y, Sigma))
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(2,3), Sigma=Sigma)
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(2,3), sigma=Sigma)
X
mu_x_vals <- seq(-3, 3, length.out = 30)
mu_y_vals <- seq(-3, 3, length.out = 30)
mu_x_vals <- seq(-3, 3, l = 30)
mu_y_vals <- seq(-3, 3, l = 30)
mu_x_vals <- seq(-10, 10, l = 30)
mu_y_vals <- seq(-10, 10, l = 30)
# Calculate log likelihood for each combination of means
loglik_matrix <- outer(mu_x_vals, mu_y_vals,
FUN = function(mu_x, mu_y) log_likelihood(mu_x, mu_y, Sigma))
conds = expand.grid(mu1 = seq(-10, 10, l = 30),
mu2=seq(-10, 10, l = 30))
conds
conds$lik = NA
dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T)
mean=c(conds$mu1[i], conds$mu2[i])
c(conds$mu1[i], conds$mu2[i])
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(2,3), sigma=Sigma)
conds = expand.grid(mu1 = seq(-10, 10, l = 30),
mu2=seq(-10, 10, l = 30))
conds
conds$lik = NA
ii
i=1
conds$mu1[i]
dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T)
conds = expand.grid(mu1 = seq(-10, 10, l = 30),
mu2=seq(-10, 10, l = 30))
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
mu1 <- seq(-10, 10, l = 30)
mu2 <- seq(-10, 10, l = 30)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
lik_mat
# Create 3D contour plot
plot_ly(x = mu_1, y = mu_2, z = lik_mat, type = "contour3d",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
rm(list=ls())
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(2,3), sigma=Sigma)
mu1 <- seq(-10, 10, l = 30)
mu2 <- seq(-10, 10, l = 30)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
# Create 3D contour plot
plot_ly(x = mu_1, y = mu_2, z = lik_mat, type = "contour3d",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "contour3d",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "surface",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
rm(list=ls())
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(2,3), sigma=Sigma)
mu1 <- seq(-10, 20, l = 30)
mu2 <- seq(-10, 20, l = 30)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "surface",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
rm(list=ls())
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(2,3), sigma=Sigma)
mu1 <- seq(-20, 20, l = 30)
mu2 <- seq(-20, 20, l = 30)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "surface",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
rm(list=ls())
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(2,3), sigma=Sigma)
mu1 <- seq(-50, 30, l = 100)
mu2 <- seq(-50, 30, l = 100)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "surface",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
which(lik_mat==max(lik_mat), arr.ind = T)
mu1[65]; mu2[66]
rm(list=ls())
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(2,3), sigma=Sigma)
mu1 <- seq(-10,10, l = 100)
mu2 <- seq(-10,10, l = 100)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "surface",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
which(lik_mat==max(lik_mat), arr.ind = T)
mu1[65]; mu2[66]
rm(list=ls())
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(1,10), sigma=Sigma)
mu1 <- seq(-10,10, l = 100)
mu2 <- seq(-10,10, l = 100)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "surface",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
which(lik_mat==max(lik_mat), arr.ind = T)
mu1[65]; mu2[66]
rm(list=ls())
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(4,10), sigma=Sigma)
mu1 <- seq(-20,20, l = 100)
mu2 <- seq(-40,40, l = 100)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "surface",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
which(lik_mat==max(lik_mat), arr.ind = T)
mu1[65]; mu2[66]
X <- rmvnorm(n_obs, mean=c(4,10), sigma=Sigma) + rnorm(n_obs)
rm(list=ls())
# Load required libraries
library(mvtnorm)
library(plotly)
# Function to calculate log likelihood
# Parameters
n_obs <- 100
Sigma <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
X <- rmvnorm(n_obs, mean=c(4,10), sigma=Sigma) + rnorm(n_obs)
mu1 <- seq(-20,20, l = 100)
mu2 <- seq(-40,40, l = 100)
conds = expand.grid(mu1 = mu1, mu2= mu2)
conds$lik = NA
for(i in 1:nrow(conds)) {
conds$lik[i] = sum(dmvnorm(X, mean=c(conds$mu1[i], conds$mu2[i]), sigma = Sigma, log=T))
}
lik_mat = tapply(conds$lik, list(conds$mu1, conds$mu2), mean)
# Create 3D contour plot
plot_ly(x = mu1, y = mu2, z = lik_mat, type = "surface",
contours = list(z = list(show = TRUE, usecolormap = TRUE,
highlightcolor = "#ff0000", project = list(z = TRUE))))
which(lik_mat==max(lik_mat), arr.ind = T)
mu1[65]; mu2[66]
